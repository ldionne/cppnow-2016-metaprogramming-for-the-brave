// Copyright Louis Dionne 2016
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

#include "lazy_logical_and.hpp"


template <typename T>
struct is_true : T { };

constexpr bool result = logical_and<
    <%=
        prefix = (0...(n/2)).map { 'is_true<std::true_type>' }.to_a
        suffix = ((n/2)+1..n).map { 'is_true<std::true_type>' }.to_a
        (prefix << 'is_true<std::false_type>').concat(suffix).join(', ')
    %>
>::value;

int main() { }
